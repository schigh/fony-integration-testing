{
	"info": {
		"_postman_id": "80be0b17-b425-45fa-990e-9a0f3ea1540c",
		"name": "fony-integration-tests",
		"description": "Integration tests example using fony",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "this is a test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6b70748-a5ea-4462-87af-34de7eddede4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"caps\",",
							"    \"foo\",",
							"    \"md5\",",
							"    \"reverse\"",
							"  ],",
							"  \"properties\": {",
							"    \"caps\": {",
							"      \"$id\": \"#/properties/caps\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Caps Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/caps/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"THIS IS A TEST\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"foo\": {",
							"      \"$id\": \"#/properties/foo\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Foo Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/foo/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"this is a test\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"md5\": {",
							"      \"$id\": \"#/properties/md5\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Md5 Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/md5/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"54b0c58c7ce9f2a8b551351102ee0938\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"reverse\": {",
							"      \"$id\": \"#/properties/reverse\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Reverse Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/reverse/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"tset a si siht\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"CAPS\"] = jsonData.caps.value === 'THIS IS A TEST';",
							"tests[\"FOO\"] = jsonData.foo.value === 'this is a test';",
							"tests[\"MD5\"] = jsonData.md5.value === '54b0c58c7ce9f2a8b551351102ee0938';",
							"tests[\"REVERSE\"] = jsonData.reverse.value === 'tset a si siht';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/words/this is a test",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"words",
						"this is a test"
					]
				},
				"description": "first request"
			},
			"response": []
		},
		{
			"name": "of pure foolishness",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f721930-c5f4-47c8-8057-f5b4547da1e4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"caps\",",
							"    \"foo\",",
							"    \"md5\",",
							"    \"reverse\"",
							"  ],",
							"  \"properties\": {",
							"    \"caps\": {",
							"      \"$id\": \"#/properties/caps\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Caps Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/caps/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"THIS IS A TEST\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"foo\": {",
							"      \"$id\": \"#/properties/foo\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Foo Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/foo/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"this is a test\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"md5\": {",
							"      \"$id\": \"#/properties/md5\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Md5 Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/md5/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"54b0c58c7ce9f2a8b551351102ee0938\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    },",
							"    \"reverse\": {",
							"      \"$id\": \"#/properties/reverse\",",
							"      \"type\": \"object\",",
							"      \"title\": \"The Reverse Schema\",",
							"      \"required\": [",
							"        \"value\"",
							"      ],",
							"      \"properties\": {",
							"        \"value\": {",
							"          \"$id\": \"#/properties/reverse/properties/value\",",
							"          \"type\": \"string\",",
							"          \"title\": \"The Value Schema\",",
							"          \"default\": \"\",",
							"          \"examples\": [",
							"            \"tset a si siht\"",
							"          ],",
							"          \"pattern\": \"^(.*)$\"",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"CAPS\"] = jsonData.caps.value === 'OF PURE FOOLISHNESS';",
							"tests[\"FOO\"] = jsonData.foo.value === 'of pure barlishness';",
							"tests[\"MD5\"] = jsonData.md5.value === '4d3271ccb9eec7f7585ca4f6ef16cbc7';",
							"tests[\"REVERSE\"] = jsonData.reverse.value === 'ssenhsiloof erup fo';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/words/of pure foolishness",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"words",
						"of pure foolishness"
					]
				},
				"description": "a foolish request"
			},
			"response": []
		},
		{
			"name": "index 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f721930-c5f4-47c8-8057-f5b4547da1e4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"value\"",
							"  ],",
							"  \"properties\": {",
							"    \"value\": {",
							"      \"$id\": \"#/properties/value\",",
							"      \"type\": \"string\",",
							"      \"title\": \"The Value Schema\",",
							"      \"default\": \"\",",
							"      \"examples\": [",
							"        \"your index is -1\"",
							"      ],",
							"      \"pattern\": \"^(.*)$\"",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"VALUE\"] = jsonData.value === 'your index is 0';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/sequence/0",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"sequence",
						"0"
					]
				},
				"description": "a foolish request"
			},
			"response": []
		},
		{
			"name": "index 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f721930-c5f4-47c8-8057-f5b4547da1e4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"value\"",
							"  ],",
							"  \"properties\": {",
							"    \"value\": {",
							"      \"$id\": \"#/properties/value\",",
							"      \"type\": \"string\",",
							"      \"title\": \"The Value Schema\",",
							"      \"default\": \"\",",
							"      \"examples\": [",
							"        \"your index is -1\"",
							"      ],",
							"      \"pattern\": \"^(.*)$\"",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"VALUE\"] = jsonData.value === 'your index is 1';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/sequence/1",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"sequence",
						"1"
					]
				},
				"description": "a foolish request"
			},
			"response": []
		},
		{
			"name": "index 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f721930-c5f4-47c8-8057-f5b4547da1e4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"value\"",
							"  ],",
							"  \"properties\": {",
							"    \"value\": {",
							"      \"$id\": \"#/properties/value\",",
							"      \"type\": \"string\",",
							"      \"title\": \"The Value Schema\",",
							"      \"default\": \"\",",
							"      \"examples\": [",
							"        \"your index is -1\"",
							"      ],",
							"      \"pattern\": \"^(.*)$\"",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"VALUE\"] = jsonData.value === 'your index is 2';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/sequence/2",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"sequence",
						"2"
					]
				},
				"description": "a foolish request"
			},
			"response": []
		},
		{
			"name": "index 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f721930-c5f4-47c8-8057-f5b4547da1e4",
						"exec": [
							"const schema = {",
							"  \"definitions\": {},",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"$id\": \"http://example.com/root.json\",",
							"  \"type\": \"object\",",
							"  \"title\": \"The Root Schema\",",
							"  \"required\": [",
							"    \"value\"",
							"  ],",
							"  \"properties\": {",
							"    \"value\": {",
							"      \"$id\": \"#/properties/value\",",
							"      \"type\": \"string\",",
							"      \"title\": \"The Value Schema\",",
							"      \"default\": \"\",",
							"      \"examples\": [",
							"        \"your index is -1\"",
							"      ],",
							"      \"pattern\": \"^(.*)$\"",
							"    }",
							"  }",
							"};",
							"",
							"console.log(responseBody);",
							"",
							"const jsonData = JSON.parse(responseBody);",
							"console.log(jsonData);",
							"tests[\"Response schema is valid\"] = tv4.validate(jsonData, schema);",
							"tests[\"VALUE\"] = jsonData.value === 'your index is 3';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://things/sequence/3",
					"protocol": "http",
					"host": [
						"things"
					],
					"path": [
						"sequence",
						"3"
					]
				},
				"description": "a foolish request"
			},
			"response": []
		}
	]
}